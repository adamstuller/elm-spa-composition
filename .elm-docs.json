[{"name":"Common","comment":" This module contains basic types for elm architecture functions\n\n# Both \n\n@docs Both \n\n# Subscription \n\n@docs Subscription\n\n# Update \n\n@docs Update\n\n# View \n\n@docs View\n\n# Route \n\n@docs Route\n\n# Flags \n\n@docs Flags\n\n","unions":[],"aliases":[{"name":"Both","comment":" Simple type used for better readability of tuple\n\n    Both a b == (a, b) \n\n","args":["a","b"],"type":"( a, b )"},{"name":"Flags","comment":" Flags type used in the router\n","args":[],"type":"Json.Decode.Value"},{"name":"Route","comment":" Type representing route, for now just String\n\n","args":[],"type":"String.String"},{"name":"Subscription","comment":" Subscription function type\n\n","args":["model","msg"],"type":"model -> Platform.Sub.Sub msg"},{"name":"Update","comment":" Update function type\n\n","args":["model","msg"],"type":"msg -> model -> ( model, Platform.Cmd.Cmd msg )"},{"name":"View","comment":" View function type\n\n","args":["model","msg"],"type":"model -> Html.Html msg"}],"values":[],"binops":[]},{"name":"Composition","comment":" This module contains functions responsilble for composition of basic elm architecture functions\n\n\n# Either composition\n\nThis composition creates new functions with sum of models of its respective partial functions\n\n@docs oneOfInits, orInit, updateEither, subscribeEither, viewEither\n\n\n# Both composition\n\nThis composition creates new functions with tuple of models of its respective partial functions\n\n@docs initWith, updateWith, subscribeWith\n\n","unions":[],"aliases":[],"values":[{"name":"initWith","comment":" Combines two init functions.\n","type":"(flags -> ( model1, Platform.Cmd.Cmd msg1 )) -> (flags -> ( model2, Platform.Cmd.Cmd msg2 )) -> flags -> ( Common.Both model1 model2, Platform.Cmd.Cmd (Either.Either msg1 msg2) )"},{"name":"oneOfInits","comment":" Starts the combination of init functions. Adding another init function is done by orInit function. \n\n","type":"Common.Both (flags -> ( model1, Platform.Cmd.Cmd msg1 )) Common.Route -> Common.Both (flags -> ( model2, Platform.Cmd.Cmd msg2 )) Common.Route -> ( Either.Either () () -> flags -> ( Either.Either model1 model2, Platform.Cmd.Cmd (Either.Either msg1 msg2) ), List.Nonempty.Nonempty (Either.Either () ()), List.Nonempty.Nonempty Common.Route )"},{"name":"orInit","comment":" Adds an another init to init composition\n","type":"( path -> flags -> ( model1, Platform.Cmd.Cmd msg1 ), List.Nonempty.Nonempty path, List.Nonempty.Nonempty Common.Route ) -> Common.Both (flags -> ( model2, Platform.Cmd.Cmd msg2 )) Common.Route -> ( Either.Either path () -> flags -> ( Either.Either model1 model2, Platform.Cmd.Cmd (Either.Either msg1 msg2) ), List.Nonempty.Nonempty (Either.Either path ()), List.Nonempty.Nonempty Common.Route )"},{"name":"subscribeEither","comment":" Combines two subscriptions creating sum of models.\n","type":"Common.Subscription model1 msg1 -> Common.Subscription model2 msg2 -> Either.Either model1 model2 -> Platform.Sub.Sub (Either.Either msg1 msg2)"},{"name":"subscribeWith","comment":" Combines two subscriptions creating tuple of models.\n","type":"Common.Subscription model1 msg1 -> Common.Subscription model2 msg2 -> Common.Both model1 model2 -> Platform.Sub.Sub (Either.Either msg1 msg2)"},{"name":"updateEither","comment":" Is composition of two update functions creating sum of their models. This function updates one of the submodels.\n","type":"Common.Update model1 msg1 -> Common.Update model2 msg2 -> Either.Either msg1 msg2 -> Either.Either model1 model2 -> ( Either.Either model1 model2, Platform.Cmd.Cmd (Either.Either msg1 msg2) )"},{"name":"updateWith","comment":" Is composition of two update functions creating tuple of their models. This function updates one of the submodels.\n","type":"Common.Update model1 msg1 -> Common.Update model2 msg2 -> Common.Update (Common.Both model1 model2) (Either.Either msg1 msg2)"},{"name":"viewEither","comment":" View composition expecting tuple of models\n","type":"Common.View model1 msg1 -> Common.View model2 msg2 -> Either.Either model1 model2 -> Html.Html (Either.Either msg1 msg2)"}],"binops":[]},{"name":"Page","comment":" This module contains types and functions required for composition of Pages.\n\n\n# Page types\n\n@docs PageWidget, PageWidgetComposition, ApplicationWithRouter\n\n\n# Page composition functions\n\n@docs join, add\n\n","unions":[],"aliases":[{"name":"ApplicationWithRouter","comment":" Parameter for single page applications. Is created by attaching router to PageWidgetComposition\n","args":["model","msg","flags"],"type":"{ init : flags -> Url.Url -> Browser.Navigation.Key -> ( model, Platform.Cmd.Cmd msg ), view : model -> Browser.Document msg, update : Common.Update model msg, subscriptions : Common.Subscription model msg, onUrlChange : Url.Url -> msg, onUrlRequest : Browser.UrlRequest -> msg }"},{"name":"PageWidget","comment":" Type for widet that represents page. Contains all basic elm architecture functions that need to be implemented in respective page modules.\n","args":["model","msg","flags"],"type":"{ init : Common.Both (flags -> ( model, Platform.Cmd.Cmd msg )) Common.Route, view : Common.View model msg, update : Common.Update model msg, subscriptions : Common.Subscription model msg }"},{"name":"PageWidgetComposition","comment":" Page composition in progress. Is created by join function.\n","args":["model","msg","path","flags"],"type":"{ init : ( path -> flags -> ( model, Platform.Cmd.Cmd msg ), List.Nonempty.Nonempty path, List.Nonempty.Nonempty Common.Route ), view : Common.View model msg, update : Common.Update model msg, subscriptions : Common.Subscription model msg }"}],"values":[{"name":"add","comment":" Adds another PageWidget to PageWidgetComposition.\n","type":"Page.PageWidgetComposition model1 msg1 path flags -> Page.PageWidget model2 msg2 flags -> Page.PageWidgetComposition (Either.Either model1 model2) (Either.Either msg1 msg2) (Either.Either path ()) flags"},{"name":"join","comment":" Combines first two pages and creates PageWidgetComposition. Is followed by add function.\n","type":"Page.PageWidget model1 msg1 flags -> Page.PageWidget model2 msg2 flags -> Page.PageWidgetComposition (Either.Either model1 model2) (Either.Either msg1 msg2) (Either.Either () ()) flags"}],"binops":[]},{"name":"Router","comment":" This module helps you set up an Elm `Program` with functions like\n\n\n# Navbar\n\n@docs Navbar, NavbarState, emptyNavbar\n\n\n# Router\n\n@docs initRouter\n\n","unions":[],"aliases":[{"name":"Navbar","comment":" Navbar type. Function that returns view of navbar.\n","args":["msg"],"type":"List.Nonempty.Nonempty String.String -> Router.NavbarState -> msg -> Url.Url -> Html.Html msg"},{"name":"NavbarState","comment":" State that navbar expects. When implementing custom navbar, this state can be accessed.\nContains window to determine the shape of navbar and information whether it is collapsed or not.\n","args":[],"type":"{ window : Router.Window, expanded : Basics.Bool }"}],"values":[{"name":"emptyNavbar","comment":" Simplest empty navbar\n","type":"List.Nonempty.Nonempty String.String -> Router.NavbarState -> msg -> Url.Url -> Html.Html msg"},{"name":"initRouter","comment":" This function takes PageWidgetComposition and another information about aplications. It attaches router to composition and creates suitable output for application.\n","type":"String.String -> Router.Navbar Router.Msg -> Page.PageWidgetComposition model msg path Common.Flags -> Page.ApplicationWithRouter (Common.Both model Router.Model) (Either.Either msg Router.Msg) Common.Flags"}],"binops":[]}]